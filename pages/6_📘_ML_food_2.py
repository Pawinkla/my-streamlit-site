# -*- coding: utf-8 -*-
# Streamlit page: ‡πÇ‡∏ä‡∏ß‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå Healthy vs Junk Food (4 ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡∏ç‡πà + ‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î)
# ‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà pages/6_üìò_Show_Code_Food_Project.py

import streamlit as st
from pathlib import Path
import re
import textwrap

st.set_page_config(page_title="‡πÇ‡∏ä‡∏ß‡πå‡πÇ‡∏Ñ‡πâ‡∏î Healthy vs Junk Food", page_icon="üìò", layout="wide")
st.title("üìò ‡πÇ‡∏ä‡∏ß‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå: Healthy vs Junk Food")
st.caption("‡∏™‡∏£‡∏∏‡∏õ 4 ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô + ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î")

ROOT = Path(".")
FILES = {
    "mapping": ROOT / "mapping_rules.py",
    "prepare": ROOT / "prepare_dataset.py",
    "train":   ROOT / "train.py",
    "predict": ROOT / "predict.py",
    "readme":  ROOT / "README.md",
}

def read_text(p: Path) -> str:
    if p.exists():
        try:
            return p.read_text(encoding="utf-8")
        except UnicodeDecodeError:
            return p.read_text(errors="ignore")
    return f"# ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {p}"

def cut_block(text: str, pattern: str, fallback_all: bool = True) -> str:
    """
    ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢ regex pattern (DOTALL).
    ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡∏∞ fallback_all=True ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏•‡πå
    """
    m = re.search(pattern, text, flags=re.DOTALL)
    if m:
        return textwrap.dedent(m.group(0)).strip()
    return text if fallback_all else "# (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)"

# --------------------------
# 1) Mapping Rules
# --------------------------
st.header("1) ‡∏Å‡∏é‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (Rule-based Mapping)")
st.markdown(
    "- ‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå/‡∏Ñ‡∏•‡∏≤‡∏™‡∏î‡∏¥‡∏ö ‚Üí **Healthy / Unhealthy**\n"
    "- ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î: ‡πÄ‡∏ä‡πá‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏±‡∏ô/‡∏ó‡∏≠‡∏î/‡∏´‡∏ß‡∏≤‡∏ô‡∏Ø‡∏•‡∏Ø ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡∏•‡∏µ‡∏ô/‡∏ô‡∏∂‡πà‡∏á/‡∏¢‡πà‡∏≤‡∏á"
)

mapping_src = read_text(FILES["mapping"])
mapping_key = cut_block(mapping_src, r"def\s+map_class_to_label\(.*?^\s*return\s+\"Healthy\"\s*$")
with st.expander("‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: map_class_to_label()", expanded=True):
    st.code(mapping_key, language="python")
with st.expander("‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå mapping_rules.py ‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏•‡πå"):
    st.code(mapping_src, language="python")

# --------------------------
# 2) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (CSV)
# --------------------------
st.header("2) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Train/Val ‡πÄ‡∏õ‡πá‡∏ô CSV")
st.markdown(
    "- ‡∏™‡πÅ‡∏Å‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `images/` ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á `data/train.csv` ‡πÅ‡∏•‡∏∞ `data/val.csv`\n"
    "- ‡∏ó‡∏≥ **stratified split** ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏á‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏µ‡∏¢‡∏á"
)

prep_src = read_text(FILES["prepare"])
prep_blocks = cut_block(prep_src, r"def\s+scan_images\(.*?def\s+write_csv\(.*?^if\s+__name__\s*==\s*\"__main__\":.*?$")
with st.expander("‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: scan_images / stratified_split / write_csv / main()", expanded=True):
    st.code(prep_blocks, language="python")
with st.expander("‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå prepare_dataset.py ‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏•‡πå"):
    st.code(prep_src, language="python")

# --------------------------
# 3) ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• ResNet-18
# --------------------------
st.header("3) ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• ResNet-18 (Fine-tune)")
st.markdown(
    "- ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ß‡∏ó ResNet-18 ‡∏à‡∏≤‡∏Å ImageNet ‚Üí ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 2 ‡∏Ñ‡∏•‡∏≤‡∏™\n"
    "- ‡πÉ‡∏ä‡πâ **CrossEntropyLoss + Adam**\n"
    "- ‡πÄ‡∏ã‡∏ü **best_model.pt** ‡πÄ‡∏°‡∏∑‡πà‡∏≠ val accuracy ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô"
)

train_src = read_text(FILES["train"])
train_key = cut_block(
    train_src,
    r"(weights\s*=\s*ResNet18_Weights\.IMAGENET1K_V1.*?model\.to\(device\).*?optimizer\s*=\s*torch\.optim\.Adam.*?for\s+epoch.*?print\(\"Best val acc\",\s*best_acc\))",
)
with st.expander("‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•/‡∏•‡∏π‡∏õ‡πÄ‡∏ó‡∏£‡∏ô/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å best_model.pt", expanded=True):
    st.code(train_key, language="python")
with st.expander("‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå train.py ‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏•‡πå"):
    st.code(train_src, language="python")

# --------------------------
# 4) ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà (Inference)
# --------------------------
st.header("4) ‡∏ô‡∏≥‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (Predict)")
st.markdown(
    "- ‡πÇ‡∏´‡∏•‡∏î `best_model.pt` ‚Üí ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏π‡∏õ‡∏Ç‡∏ô‡∏≤‡∏î 224√ó224 ‚Üí ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™\n"
    "- ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô CLI ‡∏´‡∏£‡∏∑‡∏≠‡∏ù‡∏±‡∏á‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡πÑ‡∏î‡πâ"
)

pred_src = read_text(FILES["predict"])
pred_key = cut_block(pred_src, r"(def\s+load_model\(.*?return\s+model,.*?mean,.*?std.*?def\s+main\(\):.*?if\s+__name__\s*==\s*\"__main__\":\s*main\(\))")
with st.expander("‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• + ‡∏û‡∏£‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™ + ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢", expanded=True):
    st.code(pred_key, language="python")
with st.expander("‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå predict.py ‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏•‡πå"):
    st.code(pred_src, language="python")

# --------------------------
# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á (‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ö‡∏ô‡πÄ‡∏ß‡∏ó‡∏µ)
# --------------------------
st.subheader("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡πâ‡∏ô ‡πÜ)")
st.code(
    """# 1) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° CSV
python prepare_dataset.py --images_dir ./images --out_dir ./data --val_ratio 0.2

# 2) ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
python train.py --csv_train data/train.csv --csv_val data/val.csv --epochs 8 --batch_size 32 --lr 3e-4 --out_dir outputs

# 3) ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
python predict.py --ckpt outputs/best_model.pt --image path/to/test.jpg
""",
    language="bash",
)

# --------------------------
# ‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ/‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î
# --------------------------
st.header("‡∏ô‡∏≥‡πÑ‡∏õ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£/‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á?")
st.markdown(
    """
- **‡πÅ‡∏≠‡∏õ‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å/‡∏£‡∏±‡∏Å‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û**: ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ *Healthy/Unhealthy* ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏¥‡∏õ‡∏™‡πå‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π  
- **‡πÄ‡∏°‡∏ô‡∏π‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£/‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà**: ‡∏ï‡∏¥‡∏î‡∏õ‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÄ‡∏°‡∏ô‡∏π ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏≥‡∏õ‡πâ‡∏≤‡∏¢‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô  
- **‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (Recommender)**: ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ + ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å  
- **‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î‡πÄ‡∏õ‡πá‡∏ô Multi-Class**: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏≤‡∏™‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 10‚Äì50 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì  
- **‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏Ñ‡∏≤‡∏ô‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏Ñ‡∏ä‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡πå (POS/CCTV)**: ‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤  
- **‡∏ß‡∏¥‡∏à‡∏±‡∏¢/‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤**: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏ö‡∏≤ (MobileNet/Vit-Tiny) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠  
- **MLOps**: ‡∏ó‡∏≥ Pipeline ‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (Data ‚Üí Train ‚Üí Evaluate ‚Üí Deploy) + Monitor ‡∏Ñ‡πà‡∏≤ Accuracy ‡πÅ‡∏•‡∏∞ Drift
"""
)

st.success("‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏û‡∏£‡∏µ‡πÄ‡∏ã‡∏ô‡∏ï‡πå: ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠, ‡πÇ‡∏ä‡∏ß‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç, ‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á üëç")
