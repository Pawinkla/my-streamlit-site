# pages/5_üß†_ML_Stock_1.py
from pathlib import Path
import json
import pandas as pd
import streamlit as st

# ----------------------------
# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤
# ----------------------------
st.set_page_config(
    page_title="‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ ‚Ä¢ Fundamental ML",
    page_icon="‚úÖ",
    layout="wide",
)

st.title("‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (Conclusion) ‚úÖ")
st.caption("‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: ‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡∏∞ ML (Buy / Not Buy)")

ROOT = Path(".")
MODEL_META = ROOT / "model_meta.json"
FEATURE_IMP = ROOT / "feature_importance.csv"
PRED_LATEST = ROOT / "predictions_latest.csv"
DATASET_CSV = ROOT / "dataset_financials_ttm.csv"
MODEL_PKL = ROOT / "buy_model_pipeline.pkl"

# ----------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (Bullet ‡πÅ‡∏ö‡∏ö‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏™‡πÑ‡∏•‡∏î‡πå)
# ----------------------------
with st.container():
    st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠")
    col1, col2 = st.columns([1.25, 1])

    with col1:
        st.markdown(
            """
**‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°**
- ‚úÖ **‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å Yahoo Finance** (‡∏á‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™/‡∏£‡∏≤‡∏¢‡∏õ‡∏µ ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö TTM)
- ‚úÖ **‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô 10 ‡∏ï‡∏±‡∏ß** ‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Å‡∏≥‡πÑ‡∏£ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÄ‡∏á‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
- ‚úÖ **‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• Random Forest** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏´‡∏∏‡πâ‡∏ô‡∏ß‡πà‡∏≤ ‚Äú‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠/‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‚Äù
- ‚úÖ **‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô** ‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏•‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢ (Feature Importance)
- üöÄ **‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ**: ‡∏ó‡∏≥ Dashboard ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (Alert) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå
            """
        )

    with col2:
        st.markdown("**‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå (‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå)**")
        files = [
            ("‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡πÅ‡∏•‡πâ‡∏ß (.pkl)", MODEL_PKL),
            ("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå/‡∏ï‡∏•‡∏≤‡∏î/‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤)", MODEL_META),
            ("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢ (Feature Importance)", FEATURE_IMP),
            ("‡∏ú‡∏•‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô (Predictions)", PRED_LATEST),
            ("‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≠‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• (Dataset TTM)", DATASET_CSV),
        ]
        for label, path in files:
            if path.exists():
                st.download_button(
                    label=f"‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î {label}",
                    data=path.read_bytes(),
                    file_name=path.name,
                    mime="application/octet-stream",
                )
            else:
                st.write(f"‚ñ´Ô∏è {label}: _‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå `{path.name}`_")

st.divider()

# ----------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏ö‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡∏≠‡∏¥‡∏á model_meta.json)
# ----------------------------
st.subheader("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏î‡∏¢‡∏¢‡πà‡∏≠ (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)")

feature_map_th = {
    "revenue_growth_ttm": "‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (TTM ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)",
    "gross_margin_ttm": "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πâ‡∏ô (Gross Margin, TTM)",
    "operating_margin_ttm": "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô (Operating Margin, TTM)",
    "net_margin_ttm": "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (Net Margin, TTM)",
    "roe_ttm": "ROE (‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏ï‡πà‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ñ‡∏∑‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢, TTM)",
    "roa_ttm": "ROA (‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏ï‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢, TTM)",
    "debt_to_equity": "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ñ‡∏∑‡∏≠‡∏´‡∏∏‡πâ‡∏ô",
    "ocf_to_cl": "‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô / ‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô",
    "interest_coverage": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡∏≥‡∏£‡∏∞‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ (EBIT / ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏à‡πà‡∏≤‡∏¢)",
    "asset_turnover_ttm": "‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå (‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢/‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢, TTM)",
}

if MODEL_META.exists():
    meta = json.loads(MODEL_META.read_text(encoding="utf-8"))
    feature_cols = meta.get("feature_cols", [])
    suffix = meta.get("exchange_suffix", "")
    fwd = meta.get("forward_months", 6)

    st.write(f"**‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:** `{suffix}`  ‚Ä¢  **‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå:** {fwd} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤")

    # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢" ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏ä‡∏ß‡πå‡πÄ‡∏õ‡πá‡∏ô pill
    rows = []
    for f in feature_cols:
        rows.append({
            "‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå (‡πÇ‡∏Ñ‡πâ‡∏î)": f,
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢ (‡πÑ‡∏ó‡∏¢)": feature_map_th.get(f, "-"),
        })
    df_feat = pd.DataFrame(rows)
    st.dataframe(df_feat, use_container_width=True)
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö `model_meta.json` (‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô)")

st.divider()

# ----------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢ (Feature Importance)
# ----------------------------
st.subheader("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢ (Feature Importance)")
def safe_read_csv(path: Path):
    try:
        return pd.read_csv(path)
    except Exception:
        return None

fi = safe_read_csv(FEATURE_IMP)
if fi is not None:
    # ‡∏Å‡∏£‡∏ì‡∏µ export ‡∏°‡∏≤‡∏à‡∏≤‡∏Å Series ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 0,1 ‚Üí ‡∏£‡∏µ‡πÄ‡∏ô‡∏°‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    if set(fi.columns.astype(str)) == {"0", "1"}:
        fi.columns = ["feature", "importance"]
    if {"feature", "importance"}.issubset(fi.columns):
        fi = fi.sort_values("importance", ascending=False)
        st.bar_chart(data=fi.set_index("feature"))
        st.dataframe(fi.reset_index(drop=True), use_container_width=True)
    else:
        st.info("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå feature_importance.csv ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á (feature, importance)")
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå `feature_importance.csv`")

st.divider()

# ----------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏ú‡∏•‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏ö‡∏ö‡∏™‡∏£‡∏∏‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå)
# ----------------------------
st.subheader("‡∏ú‡∏•‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (Top Picks)")
pred = safe_read_csv(PRED_LATEST)
if pred is not None:
    rename_map = {
        "ticker": "‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå",
        "asof": "‡∏á‡∏ö ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
        "proba_buy": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ (%)",
        "pred": "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
    }
    pred_disp = pred.rename(columns=rename_map).copy()
    if "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ (%)" in pred_disp.columns:
        pred_disp["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ (%)"] = (pred_disp["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ (%)"] * 100).round(1)
    if "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô" in pred_disp.columns:
        pred_disp["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] = pred_disp["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"].map({1: "‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ ‚úÖ", 0: "‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ ‚ùå"})
    st.dataframe(
        pred_disp.sort_values("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ (%)", ascending=False).head(15),
        use_container_width=True,
    )
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå `predictions_latest.csv`")

st.divider()

# ----------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 5: ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î (Next Steps)
# ----------------------------
st.subheader("‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î (Next Steps)")
st.markdown(
    """
- **Dashboard ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•**: ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á Top Picks, ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°, ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
- **Alert System**: ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå `‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ ‚â• threshold` ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô Line/Telegram/Email
- **Model Lifecycle**: ‡πÄ‡∏ó‡∏£‡∏ô‡∏ã‡πâ‡∏≥‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô, ‡πÄ‡∏Å‡πá‡∏ö Metric (F1, ROC-AUC, Precision/Recall), ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö Threshold ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    """
)

st.success("‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‚ú®")
