# pages/5_üß†_ML_Stock_1.py
import json
from pathlib import Path

import pandas as pd
import streamlit as st

# ----------------------------
# Page config
# ----------------------------
st.set_page_config(
    page_title="Conclusion ‚Ä¢ Fundamental ML",
    page_icon="‚úÖ",
    layout="wide",
)

st.title("‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (Conclusion) ‚úÖ")
st.caption("Fundamental ML ‚Ä¢ Stock Buy/Not-Buy Classification")

# ----------------------------
# Paths
# ----------------------------
ROOT = Path(".")
MODEL_META = ROOT / "model_meta.json"
FEATURE_IMP = ROOT / "feature_importance.csv"
PRED_LATEST = ROOT / "predictions_latest.csv"
DATASET_CSV = ROOT / "dataset_financials_ttm.csv"
MODEL_PKL = ROOT / "buy_model_pipeline.pkl"

# ----------------------------
# Helper
# ----------------------------
def safe_read_csv(path: Path, n=8):
    try:
        df = pd.read_csv(path)
        return df if n is None else df.head(n)
    except Exception as e:
        st.info(f"‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå `{path.name}` ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ({e})")
        return None

def pill(text: str):
    return f"<span style='display:inline-block;padding:4px 10px;border-radius:999px;background:#eef6ff;border:1px solid #d6e7ff;margin:2px 6px 2px 0'>{text}</span>"

# ----------------------------
# Summary bullets
# ----------------------------
with st.container():
    st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠")
    col1, col2 = st.columns([1.2, 1])

    with col1:
        st.markdown(
            """
- ‚úÖ **‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å Yahoo Finance** (quarterly/annual statements ‚Üí TTM)
- ‚úÖ **‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô 10 ‡∏ï‡∏±‡∏ß** (‡πÄ‡∏ä‡πà‡∏ô ROE, ROA, Margin, Debt/Equity, OCF/CL)
- ‚úÖ **‡πÉ‡∏ä‡πâ Random Forest ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å ‚Äú‡∏´‡∏∏‡πâ‡∏ô‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‚Äù**
- ‚úÖ **Export ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á Feature** (`feature_importance.csv`, `predictions_latest.csv`)
- üöÄ **‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î‡πÑ‡∏î‡πâ**: ‡∏ó‡∏≥ Dashboard ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏• & ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (Alert) ‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠
            """
        )

    with col2:
        st.markdown("**‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå**")
        files = [
            ("‡πÇ‡∏°‡πÄ‡∏î‡∏•", MODEL_PKL),
            ("‡πÄ‡∏°‡∏ï‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•", MODEL_META),
            ("Feature Importance", FEATURE_IMP),
            ("‡∏ú‡∏•‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", PRED_LATEST),
            ("Dataset (TTM)", DATASET_CSV),
        ]
        for label, path in files:
            if path.exists():
                st.download_button(
                    label=f"‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î {label} ({path.name})",
                    data=path.read_bytes(),
                    file_name=path.name,
                    mime="application/octet-stream",
                )
            else:
                st.write(f"‚ñ´Ô∏è {label}: _‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {path.name}_")

# ----------------------------
# Model meta + feature list
# ----------------------------
st.divider()
st.subheader("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏î‡∏¢‡∏¢‡πà‡∏≠")

if MODEL_META.exists():
    meta = json.loads(MODEL_META.read_text(encoding="utf-8"))
    feature_cols = meta.get("feature_cols", [])
    suffix = meta.get("exchange_suffix", "")
    fwd = meta.get("forward_months", 6)

    c1, c2 = st.columns([1.2, 1])
    with c1:
        st.write(f"**Exchange:** `{suffix}` ‚Ä¢ **Horizon:** {fwd} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤")
        st.write("**Feature ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ (10 ‡∏ï‡∏±‡∏ß):**", unsafe_allow_html=True)
        st.markdown(
            " ".join([pill(x) for x in feature_cols]),
            unsafe_allow_html=True,
        )
    with c2:
        st.code(
            "feature_cols = [\n  " + ",\n  ".join([f'"{c}"' for c in feature_cols]) + "\n]",
            language="python",
        )
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö `model_meta.json` ‚Äî ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏ó‡∏£‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô")

# ----------------------------
# Feature importance
# ----------------------------
st.divider()
st.subheader("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢ (Feature Importance)")

fi = safe_read_csv(FEATURE_IMP, n=None)
if fi is not None and {"0", "1"}.issubset(set(fi.columns.astype(str))):
    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô series.to_csv() ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠ 0,1
    fi.columns = ["feature", "importance"]
if fi is not None and {"feature", "importance"}.issubset(fi.columns):
    fi = fi.sort_values("importance", ascending=False)
    st.bar_chart(data=fi.set_index("feature"))
    st.dataframe(fi.reset_index(drop=True), use_container_width=True)
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á feature")

# ----------------------------
# Latest predictions
# ----------------------------
st.divider()
st.subheader("‡∏ú‡∏•‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (Top picks)")

pred = safe_read_csv(PRED_LATEST, n=None)
if pred is not None:
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏ó‡∏£‡∏ô export
    rename_map = {
        "ticker": "Ticker",
        "asof": "‡∏á‡∏ö ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
        "proba_buy": "‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ (%)",
        "pred": "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
    }
    pred_disp = pred.rename(columns=rename_map).copy()
    if "‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ (%)" in pred_disp.columns:
        pred_disp["‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ (%)"] = (pred_disp["‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ (%)"] * 100).round(1)
    if "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô" in pred_disp.columns:
        pred_disp["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] = pred_disp["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"].map({1: "‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ ‚úÖ", 0: "‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ ‚ùå"})
    st.dataframe(
        pred_disp.sort_values("‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ (%)", ascending=False).head(15),
        use_container_width=True,
    )
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö `predictions_latest.csv`")

# ----------------------------
# Next steps (callouts)
# ----------------------------
st.divider()
st.subheader("Next Steps / ‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î")
st.markdown(
    """
- üìä **Dashboard ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•**: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ Streamlit ‡πÅ‡∏™‡∏î‡∏á Top Picks, ‡∏Å‡∏£‡∏≤‡∏ü Performance ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö SET, ‡πÅ‡∏•‡∏∞‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
- üîî **Alert System**: ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ `proba_buy ‚â• ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á` ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏≤‡∏á Line/Telegram ‡∏´‡∏£‡∏∑‡∏≠ Email
- üß™ **Model Lifecycle**: ‡πÄ‡∏ó‡∏£‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≠‡∏ö (‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô) ‡πÅ‡∏•‡∏∞ Log metric (F1, ROC-AUC, Precision/Recall) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö threshold ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    """
)

st.success("üéâ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏•‡πâ‡∏ß!  ‡∏´‡∏ô‡πâ‡∏≤ ‚ÄòConclusion‚Äô ‡∏ô‡∏µ‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥ ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
