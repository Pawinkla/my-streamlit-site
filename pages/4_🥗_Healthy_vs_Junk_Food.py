# -*- coding: utf-8 -*-
import io
from typing import Tuple, Dict

import streamlit as st
from PIL import Image

import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import models, transforms


# ---------------------------
# 1) ‡∏ï‡∏±‡∏ß‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏û‡∏≠‡∏¢‡∏ï‡πå‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö)
# ---------------------------
@st.cache_resource
def load_food_model(model_path: str = "model/best_model.pt",
                    device_str: str = "cpu") -> Tuple[nn.Module, torch.device]:
    """
    ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• ResNet18 ‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏ß‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 2 classes (Healthy/Unhealthy)
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå .pt ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á state_dict ‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏ï‡πá‡∏° ‡πÜ
    ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏°‡∏µ prefix 'module.'.
    """
    device = torch.device(device_str)

    # ‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡πå‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: ResNet18 + fc 2 ‡∏Ñ‡∏•‡∏≤‡∏™
    backbone = models.resnet18(weights=None)
    backbone.fc = nn.Linear(backbone.fc.in_features, 2)
    backbone.to(device)
    backbone.eval()

    ckpt = torch.load(model_path, map_location=device)

    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏ï‡πá‡∏° ‡πÜ
    if isinstance(ckpt, nn.Module):
        model = ckpt.to(device).eval()
        return model, device

    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô dict: ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤ state_dict ‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏Ñ‡∏µ‡∏¢‡πå‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
    if isinstance(ckpt, dict):
        state = None
        for k in ["state_dict", "model_state", "model", "net", "weights"]:
            if k in ckpt and isinstance(ckpt[k], dict):
                state = ckpt[k]
                break
        if state is None:
            state = ckpt  # ‡πÄ‡∏õ‡πá‡∏ô dict ‡∏Ç‡∏≠‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß

        # ‡∏ï‡∏±‡∏î prefix 'module.' ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
        from collections import OrderedDict
        def strip_module(sd):
            new_sd = OrderedDict()
            for k, v in sd.items():
                new_sd[k[7:]] = v if k.startswith("module.") else v
            return new_sd

        try:
            backbone.load_state_dict(state)  # strict=True ‡∏Å‡πà‡∏≠‡∏ô
        except Exception:
            try:
                backbone.load_state_dict(strip_module(state))
            except Exception:
                # ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ strict=False
                backbone.load_state_dict(strip_module(state), strict=False)

        return backbone.eval(), device

    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏õ‡∏•‡∏Å‡∏°‡∏≤‡∏Å
    raise RuntimeError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ: ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏û‡∏≠‡∏¢‡∏ï‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö")


# ---------------------------
# 2) Preprocess ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û
# ---------------------------
@st.cache_resource
def get_transform():
    # ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á ResNet18 (ImageNet-style)
    return transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(
            mean=(0.485, 0.456, 0.406),
            std=(0.229, 0.224, 0.225)
        ),
    ])


def predict_image(model: nn.Module, device: torch.device, img: Image.Image) -> Dict[str, float]:
    """
    ‡∏£‡∏±‡∏ö PIL Image -> ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡πÄ‡∏õ‡πá‡∏ô dict
    """
    tfm = get_transform()
    x = tfm(img.convert("RGB")).unsqueeze(0).to(device)

    with torch.no_grad():
        logits = model(x)
        probs = F.softmax(logits, dim=1).squeeze(0).cpu().tolist()

    # ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡∏ï‡∏≤‡∏°‡∏´‡∏±‡∏ß‡πÇ‡∏°‡πÄ‡∏î‡∏•: index 0 = Healthy, index 1 = Unhealthy
    labels = ["Healthy", "Unhealthy"]
    return {labels[i]: float(probs[i]) for i in range(2)}


# ---------------------------
# 3) UI
# ---------------------------
st.set_page_config(page_title="Healthy vs Junk Food", page_icon="ü•ó", layout="centered")

st.title("Healthy vs Junk Food ü•ó")

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
try:
    model, device = load_food_model("model/best_model.pt", device_str="cpu")
    st.success("‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å `model/best_model.pt` (‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: CPU)")
except Exception as e:
    st.error(f"‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    st.stop()

# ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
st.subheader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (JPG/PNG)")
uploaded = st.file_uploader(
    "Drag & drop ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î *Browse files* ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ",
    type=["jpg", "jpeg", "png"],
    accept_multiple_files=False,
)

if uploaded is not None:
    try:
        img = Image.open(io.BytesIO(uploaded.read())).convert("RGB")
    except Exception:
        st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        st.stop()

    # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û
    st.image(img, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", use_column_width=True)

    # ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
    probs = predict_image(model, device, img)
    pred_label = max(probs, key=probs.get)
    pred_prob = probs[pred_label]

    st.subheader("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
    st.write(f"‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: **{pred_label}**")
    st.caption(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {pred_prob*100:.2f}%")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏•‡∏≤‡∏™
    st.markdown("---")
    st.write("**Probability ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏•‡∏≤‡∏™**")
    st.progress(int(probs["Healthy"] * 100))
    st.write(f"Healthy: {probs['Healthy']*100:.2f}%")

    st.progress(int(probs["Unhealthy"] * 100))
    st.write(f"Unhealthy: {probs['Unhealthy']*100:.2f}%")
else:
    st.info("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ üôå")
