# -*- coding: utf-8 -*-
# Healthy vs Junk Food ‚Äî Simplified (no toggles, no class pickers)
import os
import streamlit as st
import torch
from torch import nn
from torchvision import models, transforms
from PIL import Image
import numpy as np

st.set_page_config(page_title="Healthy vs Junk Food", page_icon="ü•ó", layout="centered")

MODEL_PATH = "model/best_model.pt"
CLASS_NAMES_DEFAULT = ["Healthy", "Unhealthy"]

@st.cache_resource
def load_model(path: str, device: str = "cpu"):
    if not os.path.exists(path):
        raise FileNotFoundError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà '{path}'")

    ckpt = torch.load(path, map_location=device)

    # ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏Ñ‡∏£‡∏á ResNet18 (‡∏´‡∏±‡∏ß 2 ‡∏Ñ‡∏•‡∏≤‡∏™)
    model = models.resnet18(weights=None)
    model.fc = nn.Sequential(
        nn.Linear(model.fc.in_features, 128),
        nn.ReLU(),
        nn.Dropout(0.2),
        nn.Linear(128, 2),
    )

    # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á ckpt ‡πÄ‡∏õ‡πá‡∏ô state_dict ‡∏ï‡∏£‡∏á ‡πÜ ‡∏´‡∏£‡∏∑‡∏≠ dict ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå "model"
    state_dict = ckpt["model"] if isinstance(ckpt, dict) and "model" in ckpt else ckpt
    model.load_state_dict(state_dict, strict=True)
    model.eval().to(device)

    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ class_names ‡πÉ‡∏ô ckpt ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô fallback
    class_names = (
        ckpt.get("class_names", CLASS_NAMES_DEFAULT)
        if isinstance(ckpt, dict) else CLASS_NAMES_DEFAULT
    )
    # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô list[str]
    class_names = list(map(str, class_names))
    return model, class_names

# Transform ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏£‡∏ô (ImageNet mean/std)
TFM = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406],
                         std=[0.229, 0.224, 0.225]),
])

def predict(model, img: Image.Image, device: str = "cpu") -> np.ndarray:
    x = TFM(img.convert("RGB")).unsqueeze(0)
    if device == "cuda":
        x = x.to(device)
    with torch.no_grad():
        prob = torch.softmax(model(x), dim=1)[0].detach().cpu().numpy()
    return prob  # shape (2,)

# ---------------- UI ----------------
st.markdown("## ü•ó Healthy vs Junk Food")
st.caption("‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å `model/best_model.pt` ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ")

device = "cuda" if torch.cuda.is_available() else "cpu"
try:
    model, class_names = load_model(MODEL_PATH, device)
    st.success(f"‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ (‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: {device.upper()})")
    st.caption(f"‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• ‚Üí index 0: **{class_names[0]}**, index 1: **{class_names[1]}**")
except Exception as e:
    st.error(f"‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    st.stop()

# ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
img_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (JPG/PNG)", type=["jpg", "jpeg", "png"])
if not img_file:
    st.info("‡∏•‡∏≤‡∏Å‚Äì‡∏ß‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û üì∏")
    st.stop()

img = Image.open(img_file).convert("RGB")
st.image(img, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", use_column_width=True)

# --- ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• ---
prob_raw = predict(model, img, device)     # [p0, p1]
names_raw = class_names[:]                 # ‡∏ï‡∏≤‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏û‡∏≠‡∏¢‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏°

# --- ‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ---
names = names_raw[:]
prob = prob_raw.copy()

# ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏û‡∏≠‡∏¢‡∏ï‡πå‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ 'Healthy' ‡πÅ‡∏•‡∏∞ 'Unhealthy' ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡πâ Healthy ‡∏≠‡∏¢‡∏π‡πà‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏™‡∏°‡∏≠
if set(["Healthy", "Unhealthy"]).issubset(set(n.lower().capitalize() for n in names_raw)):
    # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    names_norm = [n.lower().capitalize() for n in names_raw]
    healthy_idx = names_norm.index("Healthy")
    unhealthy_idx = names_norm.index("Unhealthy")
    order = [healthy_idx, unhealthy_idx]
    names = [names_raw[i] for i in order]
    prob = prob_raw[order]
# ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°

# -------- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• --------
top = int(prob.argmax())
label = names[top]
conf = float(prob[top])

st.markdown("---")
st.markdown(f"### ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: **{label}**")
st.caption(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: **{conf:.2f}**")

c1, c2 = st.columns(2)
with c1:
    st.metric(names[0], f"{prob[0]:.2f}")
    st.progress(min(max(float(prob[0]), 0.0), 1.0))
with c2:
    st.metric(names[1], f"{prob[1]:.2f}")
    st.progress(min(max(float(prob[1]), 0.0), 1.0))

with st.expander("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î/‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"):
    st.write("class_names (‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•):", names_raw)
    st.write("prob (‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•):", {names_raw[i]: float(prob_raw[i]) for i in range(len(prob_raw))})
    st.write("class_names (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö):", names)
    st.write("prob (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö):", {names[i]: float(prob[i]) for i in range(len(prob))})
