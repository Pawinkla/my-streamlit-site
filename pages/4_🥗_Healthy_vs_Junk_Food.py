# -*- coding: utf-8 -*-
# Healthy vs Junk Food ‚Äî Flip + Manual Mapping
import os
import streamlit as st
import torch
from torch import nn
from torchvision import models, transforms
from PIL import Image

st.set_page_config(page_title="Healthy vs Junk Food", page_icon="ü•ó", layout="centered")

# ---------- Config ----------
MODEL_PATH = "model/best_model.pt"
CLASS_NAMES_DEFAULT = ["Healthy", "Unhealthy"]

# ---------- Loaders ----------
@st.cache_resource
def load_model(path: str, device: str = "cpu"):
    if not os.path.exists(path):
        raise FileNotFoundError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà '{path}'")

    ckpt = torch.load(path, map_location=device)

    model = models.resnet18(weights=None)
    model.fc = nn.Sequential(
        nn.Linear(model.fc.in_features, 128),
        nn.ReLU(),
        nn.Dropout(0.2),
        nn.Linear(128, 2),
    )

    state_dict = ckpt["model"] if isinstance(ckpt, dict) and "model" in ckpt else ckpt
    model.load_state_dict(state_dict)
    model.eval().to(device)

    class_names = ckpt.get("class_names", CLASS_NAMES_DEFAULT) if isinstance(ckpt, dict) else CLASS_NAMES_DEFAULT
    return model, class_names

TFM = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406],
                         std=[0.229, 0.224, 0.225]),
])

def predict(model, img: Image.Image, device: str = "cpu"):
    x = TFM(img.convert("RGB")).unsqueeze(0)
    if device == "cuda":
        x = x.to(device)
    with torch.no_grad():
        prob = torch.softmax(model(x), dim=1)[0].detach().cpu().numpy()
    return prob  # [p0, p1]

# ---------- UI ----------
st.markdown("## ü•ó Healthy vs Junk Food")
st.caption("‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å `model/best_model.pt` ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ")

device = "cuda" if torch.cuda.is_available() else "cpu"
try:
    model, class_names = load_model(MODEL_PATH, device)
    st.success(f"‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ (‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: {device.upper()})")
    st.caption(f"‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• ‚Üí index 0: **{class_names[0]}**, index 1: **{class_names[1]}**")
except Exception as e:
    st.error(f"‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    st.stop()

# 1) Toggle ‡∏™‡∏•‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏•‡∏±‡∏ö‡∏°‡∏≤)
flip = st.toggle("‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™ (Flip classes)", value=False,
                 help="‡∏ñ‡πâ‡∏≤‡∏ú‡∏•‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏™‡∏•‡∏±‡∏ö Healthy/Unhealthy ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏ô‡∏µ‡πâ")

# 2) ‡∏Å‡∏≥‡∏´‡∏ô‡∏î mapping ‡πÄ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏ä‡∏±‡∏ß‡∏£‡πå ‡πÜ
mapping_choice = st.radio(
    "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤ index ‡πÑ‡∏´‡∏ô‡∏Ñ‡∏∑‡∏≠ Healthy (‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏ä‡∏±‡∏ß‡∏£‡πå‡∏™‡∏∏‡∏î)",
    options=["index 0 ‡∏Ñ‡∏∑‡∏≠ Healthy", "index 1 ‡∏Ñ‡∏∑‡∏≠ Healthy"],
    index=0,  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏ô‡πÄ‡∏Ñ‡∏¢
    horizontal=True,
)

img_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (JPG/PNG)", type=["jpg", "jpeg", "png"])
if img_file:
    img = Image.open(img_file).convert("RGB")
    st.image(img, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", use_column_width=True)

    # --- ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö '‡∏î‡∏¥‡∏ö' ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡πâ‡∏°‡∏≤ ---
    prob_raw = predict(model, img, device)  # [p0, p1]
    names_raw = class_names.copy()

    # --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 1: flip ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ---
    prob = prob_raw
    names = names_raw
    if flip:
        prob = prob[::-1]
        names = names[::-1]

    # --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö mapping ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ---
    # ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ Healthy ‡πÄ‡∏õ‡πá‡∏ô index ‡πÑ‡∏´‡∏ô ‡∏Å‡πá‡∏´‡∏°‡∏∏‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
    # ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ô‡∏µ‡πâ 'names[0]' ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô Healthy ‡πÄ‡∏™‡∏°‡∏≠
    if mapping_choice == "index 1 ‡∏Ñ‡∏∑‡∏≠ Healthy":
        if names[0] != "Healthy":
            prob = prob[::-1]
            names = names[::-1]
    else:  # "index 0 ‡∏Ñ‡∏∑‡∏≠ Healthy"
        if names[0] != "Healthy":
            prob = prob[::-1]
            names = names[::-1]

    # --- ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• ---
    top = int(prob.argmax())
    label = names[top]
    conf = float(prob[top])

    st.markdown("---")
    st.markdown(f"### ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: **{label}**")
    st.caption(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: **{conf:.2f}**")

    c1, c2 = st.columns(2)
    with c1:
        st.metric(names[0], f"{prob[0]:.2f}")
        st.progress(min(max(float(prob[0]), 0.0), 1.0))
    with c2:
        st.metric(names[1], f"{prob[1]:.2f}")
        st.progress(min(max(float(prob[1]), 0.0), 1.0))

    # Debug panel (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏≤‡∏Å‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö)
    with st.expander("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î/‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡πâ‡∏°‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)"):
        st.write("class_names (‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•):", names_raw)
        st.write("prob (‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•):", {names_raw[i]: float(p) for i, p in enumerate(prob_raw)})
        st.write("class_names (‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å):", names)
        st.write("prob (‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å):", {names[i]: float(p) for i, p in enumerate(prob)})

else:
    st.info("‡∏•‡∏≤‡∏Å‚Äì‡∏ß‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û üì∏")
