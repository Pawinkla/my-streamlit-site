# -*- coding: utf-8 -*-
import io
import json
import base64
import streamlit as st
from PIL import Image

import torch
import torch.nn as nn
import torchvision.models as models
import torchvision.transforms as transforms

# ========== CONFIG ==========
import streamlit as st
OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]

GPT_MODEL = "gpt-4o-mini"                            # ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ß‡∏¥‡∏ä‡∏±‡πà‡∏ô (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û) ‡∏Ç‡∏≠‡∏á OpenAI
# ============================

st.set_page_config(page_title="Healthy vs Junk Food", page_icon="ü•ó", layout="centered")
st.title("Healthy vs Junk Food ü•ó")

# ------------ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (ResNet18 2-class) ------------
@st.cache_resource
def load_food_model(model_path="model/best_model.pt", device="cpu"):
    device = torch.device(device)
    model = models.resnet18(weights=None)
    num_features = model.fc.in_features
    model.fc = nn.Linear(num_features, 2)  # 2 classes: Healthy / Unhealthy
    sd = torch.load(model_path, map_location=device)
    model.load_state_dict(sd)
    model.eval().to(device)
    return model, device

model, device = load_food_model()

# ------------ Transform -------------
tfm = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=(0.485, 0.456, 0.406),
                         std=(0.229, 0.224, 0.225)),
])

# ------------ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô inference -------------
@torch.inference_mode()
def predict(img: Image.Image):
    x = tfm(img.convert("RGB")).unsqueeze(0).to(device)
    logits = model(x)
    probs = torch.softmax(logits, dim=1).cpu().numpy().ravel()
    idx = int(probs.argmax())
    classes = ["Healthy", "Unhealthy"]
    return classes[idx], float(probs[0]), float(probs[1])

# ========== ‡∏™‡πà‡∏ß‡∏ô GPT: ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ ==========
def _to_base64(image: Image.Image) -> str:
    buf = io.BytesIO()
    image.convert("RGB").save(buf, format="JPEG", quality=95)
    return base64.b64encode(buf.getvalue()).decode("utf-8")

def estimate_calories_with_gpt(image: Image.Image, detail_hint: str = ""):
    """
    ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OpenAI Vision ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON:
      { "calories_kcal": number, "confidence": 0-1, "items": [ { "name": str, "kcal": number } ] }
    """
    import openai   # ‡πÉ‡∏ä‡πâ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ openai (SDK ‡πÉ‡∏´‡∏°‡πà)
    openai.api_key = OPENAI_API_KEY

    img_b64 = _to_base64(image)
    system_prompt = (
        "You are a nutrition assistant. "
        "Given a meal photo, estimate the total calories (kcal). "
        "List key items with rough kcal breakdown. "
        "Respond ONLY in JSON with keys: calories_kcal, confidence, items[]."
    )
    user_prompt = (
        "Estimate calories of this meal. If uncertain, give your best reasonable guess."
        + (f" Extra context: {detail_hint}" if detail_hint else "")
    )

    # ‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á Chat Completions ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏ä‡∏±‡πà‡∏ô (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° + ‡∏£‡∏π‡∏õ)
    # ‡πÇ‡∏Ñ‡∏£‡∏á content ‡πÅ‡∏ö‡∏ö text + image_url (data URL)
    data_url = f"data:image/jpeg;base64,{img_b64}"

    completion = openai.ChatCompletion.create(
        model=GPT_MODEL,
        messages=[
            {"role": "system", "content": system_prompt},
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": user_prompt},
                    {"type": "image_url", "image_url": {"url": data_url}},
                ],
            },
        ],
        temperature=0.2,
        max_tokens=300,
    )

    text = completion.choices[0].message["content"]
    # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° parse JSON ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö
    # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡πÅ‡∏õ‡∏•‡∏Å ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏ö‡∏•‡πá‡∏≠‡∏Ñ JSON ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
    try:
        # ‡∏ï‡∏±‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ ```json ... ```
        if "```" in text:
            text = text.split("```", 2)[1]
            if text.lower().startswith("json"):
                text = text[4:]
        data = json.loads(text)
        return {
            "ok": True,
            "calories_kcal": float(data.get("calories_kcal", 0)),
            "confidence": float(data.get("confidence", 0)),
            "items": data.get("items", []),
            "raw": text,
        }
    except Exception as e:
        return {"ok": False, "error": f"Cannot parse JSON: {e}", "raw": text}

# ========== UI ==========

uploaded = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (JPG/PNG)", type=["jpg", "jpeg", "png"])
hint = st.text_input("(‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) ‡∏ö‡∏≠‡∏Å‡∏Ñ‡∏≥ Ìûå‡∏ï‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ GPT ‡πÄ‡∏ä‡πà‡∏ô '‡∏≠‡∏Å‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á ‡∏≠‡∏∞‡πÇ‡∏ß‡∏Ñ‡∏≤‡πÇ‡∏î ‡∏ú‡∏±‡∏Å‡∏™‡∏•‡∏±‡∏î ‡∏ô‡πâ‡∏≥‡∏™‡∏•‡∏±‡∏î‡∏á‡∏≤‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô'", "")

if uploaded:
    img = Image.open(uploaded)
    st.image(img, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", use_column_width=True)

    label, p_healthy, p_unhealthy = predict(img)
    st.subheader("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
    st.markdown(f"**‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:** {label}")
    st.caption(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à (Healthy): {p_healthy*100:.2f}% ‚Äî (Unhealthy): {p_unhealthy*100:.2f}%")

    # ===== ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ GPT ‡πÉ‡∏ï‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå =====
    with st.spinner("‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ GPT‚Ä¶"):
        g = estimate_calories_with_gpt(img, hint.strip())
    if g.get("ok"):
        st.markdown("### üî• ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà (GPT)")
        st.markdown(f"**‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:** ~ **{g['calories_kcal']:.0f} kcal**  \n"
                    f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à (GPT):** {g['confidence']*100:.1f}%")
        if g.get("items"):
            st.markdown("**‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì):**")
            for it in g["items"]:
                name = it.get("name", "item")
                kcal = it.get("kcal", None)
                if kcal is not None:
                    st.markdown(f"- {name}: ~{kcal:.0f} kcal")
                else:
                    st.markdown(f"- {name}")
        with st.expander("‡∏ú‡∏•‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å GPT (JSON)"):
            st.code(json.dumps({
                "calories_kcal": g["calories_kcal"],
                "confidence": g["confidence"],
                "items": g["items"],
            }, ensure_ascii=False, indent=2), language="json")
    else:
        st.error("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        st.caption(g.get("error", ""))
        with st.expander("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å GPT"):
            st.code(g.get("raw", ""), language="json")

else:
    st.info("‡∏•‡∏≤‡∏Å-‡∏ß‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏†‡∏≤‡∏û")
