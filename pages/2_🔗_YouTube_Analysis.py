# pages/2_üìà_YouTube_Analysis.py
# -------------------------------------------------------------
# YouTube Data Analysis (Replica of your Notion dashboard)
# - Upload CSV (UTF-8)
# - Filters on the left
# - KPI cards (total channels / subs / views / avg views per video)
# - Category summaries (Subscribers & Views)
# - Top 20 channels by subscribers
#
# ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:
# - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ (‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° map ‡πÉ‡∏´‡πâ)
# - ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ ‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å Views / Videos
# -------------------------------------------------------------

import io
from pathlib import Path
import numpy as np
import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go


# ---------------------------
# Page config
# ---------------------------
st.set_page_config(
    page_title="YouTube Data Analysis",
    page_icon="üìà",
    layout="wide",
)

# ---------------------------
# Helpers
# ---------------------------
THOUSANDS = "{:,}".format

def format_int(x):
    try:
        return THOUSANDS(int(x))
    except Exception:
        return "-"

def coalesce_columns(df: pd.DataFrame, targets: dict) -> pd.DataFrame:
    """
    ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà/‡∏£‡∏µ‡πÄ‡∏ô‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ -> ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
    targets = {
        "standard_name": ["candidate1", "candidate2", ...]
    }
    """
    cols = {c.lower().strip(): c for c in df.columns}
    for std, cands in targets.items():
        for c in cands:
            key = c.lower().strip()
            if key in cols:
                df.rename(columns={cols[key]: std}, inplace=True)
                break
    return df

def ensure_numeric(df, cols):
    for c in cols:
        if c in df.columns:
            df[c] = pd.to_numeric(df[c], errors="coerce")
    return df

def ensure_int(df, cols):
    for c in cols:
        if c in df.columns:
            df[c] = pd.to_numeric(df[c], errors="coerce").fillna(0).astype(int)
    return df


# ---------------------------
# Sidebar ‚Äî Upload & Filters
# ---------------------------
with st.sidebar:
    st.header("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î / ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    up = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î CSV (UTF-8)", type=["csv"], help="Limit 200MB per file : CSV")

    st.markdown("---")
    st.header("‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

# ---------------------------
# Load data
# ---------------------------
if up is None:
    st.info("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏à‡∏≤‡∏Å youtubers.me (‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà, ‡∏õ‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°, Subscribers, Views, Videos)")
    st.stop()

# ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô UTF-8, ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏≠‡∏á latin-1
try:
    df = pd.read_csv(up, encoding="utf-8")
except Exception:
    up.seek(0)
    df = pd.read_csv(up, encoding="latin-1")

# ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏ö‡∏ö lowercase ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
df.columns = [c.strip() for c in df.columns]

# map ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
df = coalesce_columns(
    df,
    {
        "channel": ["channel", "title", "name", "yt_channel", "yt_name", "username", "channel_title"],
        "country": ["country", "nation"],
        "category": ["category", "topics"],
        "started": ["started", "joined", "created_year", "year"],
        "subscribers": ["subscribers", "subs", "subscriber_count"],
        "views": ["views", "total_views", "view_count"],
        "videos": ["videos", "video_count", "uploads"],
        # ‡∏ö‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ avg_views ‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        "avg_views": ["avg_views", "average_views", "avg_views_per_video", "view_per_video"]
    }
)

# ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
df = ensure_numeric(df, ["subscribers", "views", "videos", "avg_views"])
df = ensure_int(df, ["started"])

# ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ avg_views ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å views / videos
if "avg_views" not in df.columns:
    if "views" in df.columns and "videos" in df.columns:
        df["avg_views"] = df["views"] / df["videos"].replace(0, np.nan)
    else:
        df["avg_views"] = np.nan

# ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
for must in ["channel", "category"]:
    if must in df.columns:
        df = df[~df[must].isna()]

# ---------------------------
# Sidebar filters
# ---------------------------
with st.sidebar:
    # Country
    if "country" in df.columns and df["country"].notna().any():
        countries = ["All"] + sorted([c for c in df["country"].dropna().unique().tolist() if str(c).strip() != ""])
        selected_country = st.selectbox("Country", countries, index=0)
    else:
        selected_country = "All"

    # Category
    if "category" in df.columns and df["category"].notna().any():
        cats = ["All"] + sorted([c for c in df["category"].dropna().unique().tolist() if str(c).strip() != ""])
        selected_cat = st.selectbox("Category", cats, index=0)
    else:
        selected_cat = "All"

    # Started years
    if "started" in df.columns and df["started"].notna().any():
        ymin, ymax = int(df["started"].min()), int(df["started"].max())
        year_range = st.slider("‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏ä‡πà‡∏≠‡∏á (Started)", min_value=ymin, max_value=ymax, value=(ymin, ymax))
    else:
        year_range = None

    # Subscribers slider (‡∏ä‡πà‡∏ß‡∏á)
    if "subscribers" in df.columns and df["subscribers"].notna().any():
        smin, smax = int(df["subscribers"].min()), int(df["subscribers"].max())
        sub_range = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° (Subscribers)", min_value=smin, max_value=smax, value=(smin, smax))
    else:
        sub_range = None

    # Search by channel name
    search_name = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á (‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠)", value="").strip().lower()

# ---------------------------
# Apply filters
# ---------------------------
f = df.copy()

if selected_country != "All" and "country" in f.columns:
    f = f[f["country"].astype(str) == selected_country]

if selected_cat != "All" and "category" in f.columns:
    f = f[f["category"].astype(str) == selected_cat]

if year_range and "started" in f.columns:
    ymin, ymax = year_range
    f = f[(f["started"] >= ymin) & (f["started"] <= ymax)]

if sub_range and "subscribers" in f.columns:
    smin, smax = sub_range
    f = f[(f["subscribers"] >= smin) & (f["subscribers"] <= smax)]

if search_name and "channel" in f.columns:
    f = f[f["channel"].astype(str).str.lower().str.contains(search_name)]

# ---------------------------
# Title + data source
# ---------------------------
st.title("YouTube Data Analysis")
st.caption("‡∏ó‡∏µ‡πà‡∏°‡∏≤ (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á): youtubers.me ‚Äî ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ä‡πà‡∏≠‡∏á/‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏£‡∏≠‡∏á‡∏î‡∏π ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

# ---------------------------
# KPI Cards
# ---------------------------
col1, col2, col3, col4 = st.columns(4)

# ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏≠‡∏á
total_channels = len(f)

# Subscribers ‡∏£‡∏ß‡∏°
total_subs = f["subscribers"].sum() if "subscribers" in f.columns else np.nan

# Views ‡∏£‡∏ß‡∏°
total_views = f["views"].sum() if "views" in f.columns else np.nan

# ‡∏ß‡∏¥‡∏ß‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (‡∏£‡∏ß‡∏°) = total_views / total_videos
if "views" in f.columns and "videos" in f.columns and f["videos"].sum() > 0:
    avg_per_video = int(f["views"].sum() / f["videos"].sum())
elif "avg_views" in f.columns:
    # ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ avg_views ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ across channels ‡πÅ‡∏ó‡∏ô
    avg_per_video = int(f["avg_views"].mean(skipna=True)) if f["avg_views"].notna().any() else np.nan
else:
    avg_per_video = np.nan

col1.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", format_int(total_channels))
col2.metric("‡∏£‡∏ß‡∏°‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° (Subscribers)", format_int(total_subs))
col3.metric("‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß (Views)", format_int(total_views))
col4.metric("‡∏ß‡∏¥‡∏ß‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠", format_int(avg_per_video))

st.markdown("")

# ---------------------------
# Category Summary (Subscribers / Views)
# ---------------------------
left, right = st.columns(2)

if "category" in f.columns:
    # Subscribers by category
    if "subscribers" in f.columns and f["subscribers"].notna().any():
        cat_sub = (
            f.groupby("category", as_index=False)["subscribers"]
            .sum()
            .sort_values("subscribers", ascending=True)  # for horizontal ascending
        )
        fig1 = px.bar(
            cat_sub,
            x="subscribers",
            y="category",
            orientation="h",
            title="‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏î‡∏¢ Category ‚Äì Subscribers ‡∏£‡∏ß‡∏°",
            labels={"subscribers": "Subscribers", "category": "Category"},
            height=500,
        )
        fig1.update_traces(marker_color="#2e77ff")
        fig1.update_layout(yaxis_title="", xaxis_title="")
        left.plotly_chart(fig1, use_container_width=True)
    else:
        left.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Subscribers ‡πÉ‡∏´‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏° Category")

    # Views by category
    if "views" in f.columns and f["views"].notna().any():
        cat_view = (
            f.groupby("category", as_index=False)["views"]
            .sum()
            .sort_values("views", ascending=True)
        )
        fig2 = px.bar(
            cat_view,
            x="views",
            y="category",
            orientation="h",
            title="‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏î‡∏¢ Category ‚Äì Views ‡∏£‡∏ß‡∏°",
            labels={"views": "Views", "category": "Category"},
            height=500,
        )
        fig2.update_traces(marker_color="#9aa3af")
        fig2.update_layout(yaxis_title="", xaxis_title="")
        right.plotly_chart(fig2, use_container_width=True)
    else:
        right.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Views ‡πÉ‡∏´‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏° Category")
else:
    st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Category ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏° Category ‡πÑ‡∏î‡πâ")

st.markdown("---")

# ---------------------------
# Top 20 Channels by Subscribers
# ---------------------------
st.subheader("üèÜ Top 20 Channels (by Subscribers)")
if "channel" in f.columns and "subscribers" in f.columns:
    top20 = (
        f.dropna(subset=["channel", "subscribers"])
        .sort_values("subscribers", ascending=False)
        .head(20)
        .iloc[::-1]  # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
    )
    fig_top = px.bar(
        top20,
        x="subscribers",
        y="channel",
        orientation="h",
        labels={"subscribers": "Subscribers", "channel": "Channel"},
        height=700,
    )
    fig_top.update_traces(marker_color="#f97316")
    fig_top.update_layout(yaxis_title="", xaxis_title="")
    st.plotly_chart(fig_top, use_container_width=True)
else:
    st.info("‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå channel ‡πÅ‡∏•‡∏∞ subscribers ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á Top 20 Channels")

# ---------------------------
# Optional: ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π)
# ---------------------------
with st.expander("‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á)"):
    st.write(f.reset_index(drop=True))
